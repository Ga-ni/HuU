

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ChatClient{
   String name="";
    BufferedReader in;
    PrintWriter out;
    JFrame frame = new JFrame("Chatter");
    JTextField textField = new JTextField(40);
    JTextArea messageArea = new JTextArea(8, 40);
    JButton whisper = new JButton("귓속말"); 
    
    
    String other="";

    public ChatClient()
    {
    	JButton b1 = new JButton("전송"); 
        b1.setBackground(Color.pink);
        
        // Layout GUI
        textField.setEditable(false);//textField를 아직은 사용하지 못하게 false값으로 초기화한다.
        messageArea.setEditable(false);//messageArea를 아직은 사용하지 못하게 false값으로 초기화한다.
        
        frame.setLayout(new FlowLayout());
       // frame.getContentPane().add(new JScrollPane(messageArea)); //messageArea를 생성한다.
        frame.getContentPane().add(textField); // textField를 생성한다.
        frame.getContentPane().add(b1); // textField를 생성한다.
        frame.getContentPane().add(whisper);//whisper button을 추가한다.
        frame.pack();
        
        
        
        /* frame.getContentPane().add(textField, "North"); // textField를 생성한다.
        frame.getContentPane().add(b1, "Center"); // textField를 생성한다.
        frame.getContentPane().add(new JScrollPane(messageArea), "West"); //messageArea를 생성한다.
        frame.getContentPane().add(whisper,"East");//whisper button을 추가한다.
        frame.pack();*/

        // Add Listeners
        textField.addActionListener(new ActionListener() { 
           
            public void actionPerformed(ActionEvent e) 
            {
           
                out.println(textField.getText());//textField에 입력을 받아서 서버로 보낸다.
                textField.setText("");
            }
            
        });
        
        whisper.addActionListener(new ActionListener(){
           
            public void actionPerformed(ActionEvent e) 
             {
            	other = sendWhisper(); //sendWhisper함수를 호출해서 귓속말을 보낼 사람의 이름을 입력받아서 other에 저장한다.
                 out.println(other+"@"+textField.getText()); // "귓속말 받을 사람의 이름@message" format으로 서버로 보낸다. 
                 textField.setText("");
             }
        });
    }

    
    private String getServerAddress() 
    {
        return JOptionPane.showInputDialog(
            frame,
            "Enter IP Address of the Server:",
            "Welcome to the Chatter",
            JOptionPane.QUESTION_MESSAGE); //ip address를 입력받음
    }

   
    private String getName() 
    {
        return JOptionPane.showInputDialog(
            frame,
            "Choose a screen name:",
            "Screen name selection",
            JOptionPane.PLAIN_MESSAGE); //클라이언트의 이름을 입력받음
    }

   private String sendWhisper()
   {
      return JOptionPane.showInputDialog(
               frame,
               "Who will you spend the WHISPER message?",
               "",
               JOptionPane.PLAIN_MESSAGE); //귓속말을 보낼 상대의 이름을 입력받음
   }
    private void run() throws IOException 
    {

        String serverAddress = getServerAddress(); //sever의 ip address를 저장함
        Socket socket = new Socket(serverAddress, 9001);
        in = new BufferedReader(new InputStreamReader( //서버로 부터 읽어오는 input stream
            socket.getInputStream()));
        out = new PrintWriter(socket.getOutputStream(), true); //서버로 데이터를 보내는 output stream
        
     
        while (true) 
        {
            String line = in.readLine(); //서버로부터 데이터를 읽어와서 line string에 저장함
            if (line.startsWith("SUBMITNAME")) //서버로부터 읽어온 데이터가 SUBMITNAME으로 시작하면
            {
               name = getName(); // getName()함수를 호출해서 클라이언트의 이름을 입력받음
                out.println(name); // 입력 받은 이름을 서버에 보내줌
            } 
            else if (line.startsWith("NAMEACCEPTED")) //서버로부터 읽어온 데이터가 NAMEACCEPTED로 시작하면
            {
                textField.setEditable(true); //이제 textField가 수정 가능해짐
            } 
            else if(line.startsWith("ENTRANCE"))//서버로부터 읽어온 데이터가 ENTRANCE로 시작하면
            {
               messageArea.append("<"+line.substring(8)+">"+" ENTRANCE\n"); //읽어온 데이터의 8글자 뒤부터가 이름이기 때문에 messageArea에 <name> ENTRANCE란 메세지를 첨부한다. 
               
            }
            else if(line.startsWith("WHISPER")) //서버로부터 읽어온 데이터가 WHISPER로 시작하면
            {
            	
            	messageArea.append(line.substring(7)+"\n");//읽어온 데이터의 7글자 뒤부터가 "보내는 사람의 이름: message" format이기 때문에 messageArea에 첨부한다.
            }
            else if (line.startsWith("MESSAGE")) 
            {
                messageArea.append(line.substring(8) + "\n"); //읽어온 데이터의 8글자 뒤부터가 message이기 때문에 messageArea에 첨부한다.
            }
            else if(line.startsWith("EXIT")) //서버로부터 읽어온 데이터가 EXIT로 시작하면
            {
            	messageArea.append("<"+line.substring(4)+">"+" EXIT"); //읽어온 데이터의 4글자 뒤부터가 종료하는 클라이언트의 name이기 때문에 messageArea에 첨부한다.
            }
        } 
           
    }

   
    public static void main(String[] args) throws Exception 
    {
        ChatClient client = new ChatClient();
        client.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        client.frame.setVisible(true);
        client.run();
    }
}

----------------------------------------------------------------------------------------------------------


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashSet;

public class ChatServer {
    private static final int PORT = 9001;

    private static HashSet<String> names = new HashSet<String>();
    private static HashSet<PrintWriter> writers = new HashSet<PrintWriter>();

    
    public static void main(String[] args) throws Exception {
        System.out.println("The chat server is running.");
        ServerSocket listener = new ServerSocket(PORT);
        try {
            while (true) {
                new Handler(listener.accept()).start();
            }
        } finally {
            listener.close();
        }
    }

    private static class Handler extends Thread {
        private String name;
        private Socket socket;
        private BufferedReader in;
        private PrintWriter out;

        
        public Handler(Socket socket) {
            this.socket = socket;
        }
        public void run() {
            try {

                // Create character streams for the socket.
                in = new BufferedReader(new InputStreamReader(
                    socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                // Request a name from this client.  Keep requesting until
                // a name is submitted that is not already used.  Note that
                // checking for the existence of a name and adding the name
                // must be done while locking the set of names.
                while (true) {
                    out.println("SUBMITNAME");
                    name = in.readLine();
                    if (name == null) {
                        return;
                    }
                    synchronized (names) {
                        if (!names.contains(name)) {
                            names.add(name);
                            break;
                        }
                    }
                }

                // Now that a successful name has been chosen, add the
                // socket's print writer to the set of all writers so
                // this client can receive broadcast messages.
                out.println("NAMEACCEPTED");
                writers.add(out);

                // Accept messages from this client and broadcast them.
                // Ignore other clients that cannot be broadcasted to.
                while (true) {
                    String input = in.readLine();
                    if (input == null) {
                        return;
                    }
                    for (PrintWriter writer : writers) {
                        writer.println("MESSAGE " + name + ": " + input);
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            } finally {
                // This client is going down!  Remove its name and its print
                // writer from the sets, and close its socket.
                if (name != null) {
                    names.remove(name);
                }
                if (out != null) {
                    writers.remove(out);
                }
                try {
                    socket.close();
                } catch (IOException e) {
                }
            }
        }
    }
}
